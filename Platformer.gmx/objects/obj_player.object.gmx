<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.2;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;
global.sundamage = 100;
image_speed = 0;
depth = -100;
instance_create(0, 0, obj_camera);
instance_create(0,0, obj_healthbar);
if global.checkpoint = true
{
x = global.playerspawnx
y = global.playerspawny
};

tinyjump = 0;

image_xscale = 1.25;
image_yscale = 1.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = (keyboard_check(ord('D')) or keyboard_check(vk_right));
key_left = (keyboard_check(ord('A')) or keyboard_check(vk_left));
mask_index = spr_player;

forced_to_crouch = (place_meeting(x,y - 1,obj_wall));

key_crouch =  forced_to_crouch or keyboard_check(ord('S')) or keyboard_check(vk_down);
key_jump = (not key_crouch and (keyboard_check_pressed(vk_space) or keyboard_check_pressed(ord('W')) or keyboard_check_pressed(vk_up)))



//React to inputs
move = -key_left + key_right;
if key_crouch 
{
    hsp = move * movespeed
}
else 
{
    hsp = move * movespeed * 2
};

if move == 0 
{
    image_speed = 0;
}

if key_crouch
{
    global.crouch = true;
    mask_index = spr_crouchhitbox;
}
else
{
    global.crouch = false;
    mask_index = spr_player;
};

if (vsp &lt; 10)
{
    vsp += grav;

if (place_meeting(x,y+1,obj_wall))
{
    if (key_jump) vsp = -jumpspeed;
}

var crouch = global.crouch * 8

if hsp == 0 image_speed = 0 else image_speed = 0.1;
if image_index &gt; 3 + crouch and image_index &gt; crouch and hsp &gt; 0 image_index = crouch;
if image_index &gt; 7 + crouch and hsp &lt; 0 image_index = 4 + crouch;
if image_index &lt; 4 + crouch and hsp &lt; 0 image_index = 4 + crouch;
if image_index &lt; 7 image_index += crouch;
if image_index &gt; 7 and crouch = 0 image_index -= 8;

if global.crouch
{
    tinyjump = 0;
};

if not global.crouch and tinyjump = 0 
{
y -= 1;
tinyjump = 1;
};




//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;


//Vertical collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
    y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;


scr_definedimensions();


//Checkforsuncollision


if not collision_line( x - width, y, x - width, 0, obj_wall, false, false ) or not collision_line( x + width, y, x + width, 0, obj_wall, false, false )
{
global.sundamage -= 2;
audio_sound_pitch(snd_vegansong, 0.5);

};

if collision_line( x - width, y, x - width, 0, obj_wall, false, false ) and collision_line( x + width, y, x + width, 0, obj_wall, false, false )
{
global.sundamage += 2;
audio_sound_pitch(snd_vegansong, 1);




};


//Stop player from leaving room

x=clamp(x, width, room_width - width);
if y &lt; height
{
y = height;
};


if y &gt; room_height - 1
{
room_restart();
};



//Add sundamage effect

if global.sundamage &gt; 100 global.sundamage = 100;
image_blend = make_colour_hsv(0,(100 - global.sundamage) * 2.55,255); 



//Play music

if not audio_is_playing(snd_vegansong)
{
audio_play_sound(snd_vegansong,0,0);
};


//Create vampire hunter for lvl5

if room = rm_lvl5 
{
if x &gt; 1500 and lvl5vhuntercreated1 = 0
{
vhunter = instance_create(2030,663,obj_vampirehunter)
vhunter.vhdirection = 2;
vhunter.setspeed = 1.5;
lvl5vhuntercreated1 = 1
}

};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
